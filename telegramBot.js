const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// ==============================================
// –ù–ê–°–¢–†–û–ô–ö–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ==============================================

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_BOT_TOKEN –≤ .env');
}

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  polling: false,
  filepath: false
});

const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123';
const ADMINS_FILE = path.join(__dirname, 'admins.json');
const LOGS_FILE = path.join(__dirname, 'bot.log');

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
if (!fs.existsSync(ADMINS_FILE)) {
  fs.writeFileSync(ADMINS_FILE, '[]');
}
if (!fs.existsSync(LOGS_FILE)) {
  fs.writeFileSync(LOGS_FILE, '');
}

// ==============================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê–ú–ò
// ==============================================

let activeAdmins = loadAdmins();

function loadAdmins() {
  try {
    const data = fs.readFileSync(ADMINS_FILE, 'utf8');
    const admins = JSON.parse(data);
    
    if (!Array.isArray(admins)) {
      throw new Error('Invalid admins.json format');
    }
    
    logAction(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${admins.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞`);
    return new Set(admins);
    
  } catch (err) {
    if (err.code === 'ENOENT') {
      logAction('–§–∞–π–ª admins.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
    } else {
      logError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ admins.json:', err);
    }
    return new Set();
  }
}

function saveAdmins() {
  try {
    const adminsArray = [...activeAdmins];
    fs.writeFileSync(ADMINS_FILE, JSON.stringify(adminsArray, null, 2));
    logAction(`–ê–¥–º–∏–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${adminsArray.length})`);
  } catch (err) {
    logError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è admins.json:', err);
  }
}

// ==============================================
// –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï
// ==============================================

function logAction(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ACTION: ${message}\n`;
  
  try {
    fs.appendFileSync(LOGS_FILE, logMessage);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', err);
  }
  
  console.log(logMessage.trim());
}

function logError(message, error) {
  const timestamp = new Date().toISOString();
  const errorMessage = error ? `${message} ${error.stack || error}` : message;
  const logMessage = `[${timestamp}] ERROR: ${errorMessage}\n`;
  
  try {
    fs.appendFileSync(LOGS_FILE, logMessage);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', err);
  }
  
  console.error(logMessage.trim());
}

// ==============================================
// –ò–ù–¢–ï–†–§–ï–ô–° –ë–û–¢–ê
// ==============================================

function setupBotMenu() {
  try {
    bot.setMyCommands([
      { command: '/start', description: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' },
      { command: '/admins', description: '–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤' },
      { command: '/stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞' },
      { command: '/status', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞' },
      { command: '/logout', description: '–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏' }
    ]);

    logAction('–ú–µ–Ω—é –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
  } catch (err) {
    logError('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é:', err);
  }
}

// ==============================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
// ==============================================

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  logAction(`–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç ${chatId}`);
  
  if (activeAdmins.has(chatId)) {
    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: 'üë• –ê–¥–º–∏–Ω—ã' }],
          [{ text: 'üö™ –í—ã–π—Ç–∏' }]
        ],
        resize_keyboard: true
      }
    };
    
    return bot.sendMessage(
      chatId,
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.`,
      keyboard
    ).catch(err => logError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
  }
  
  bot.sendMessage(
    chatId, 
    'üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:',
    { reply_markup: { remove_keyboard: true }}
  ).catch(err => logError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
});

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
bot.onText(/\/status/, (msg) => {
  const chatId = msg.chat.id;
  const isAdmin = activeAdmins.has(chatId);
  
  bot.sendMessage(
    chatId,
    `–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n` +
    `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: ${activeAdmins.size}\n` +
    `–í–∞—à —Å—Ç–∞—Ç—É—Å: ${isAdmin ? '‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '‚ùå –ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n` +
    `–í–∞—à chat ID: ${chatId}`
  ).catch(err => logError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', err));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
const authAttempts = new Map();
const MAX_ATTEMPTS = 5;
const BLOCK_TIME = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

bot.on('message', (msg) => {
  if (msg.text?.startsWith('/')) return;
  
  const chatId = msg.chat.id;
  const now = Date.now();
  logAction(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: ${msg.text}`);
  
  if (authAttempts.has(chatId)) {
    const { attempts, lastAttempt, blockedUntil } = authAttempts.get(chatId);
    
    if (blockedUntil && now < blockedUntil) {
      const timeLeft = Math.ceil((blockedUntil - now) / 1000 / 60);
      return bot.sendMessage(
        chatId,
        `‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${timeLeft} –º–∏–Ω—É—Ç.`
      ).catch(err => logError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
    }
  }

  if (msg.text === ADMIN_PASSWORD) {
    activeAdmins.add(chatId);
    saveAdmins();
    authAttempts.delete(chatId);
    
    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: 'üë• –ê–¥–º–∏–Ω—ã' }],
          [{ text: 'üö™ –í—ã–π—Ç–∏' }]
        ],
        resize_keyboard: true
      }
    };
    
    bot.sendMessage(
      chatId,
      '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n' +
      '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.',
      keyboard
    ).then(() => {
      logAction(`–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${chatId}`);
    }).catch(err => {
      logError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
    });
  } else if (!activeAdmins.has(chatId)) {
    const attemptData = authAttempts.get(chatId) || { attempts: 0 };
    attemptData.attempts++;
    attemptData.lastAttempt = now;
    
    if (attemptData.attempts >= MAX_ATTEMPTS) {
      attemptData.blockedUntil = now + BLOCK_TIME;
      const timeLeft = Math.ceil(BLOCK_TIME / 1000 / 60);
      bot.sendMessage(
        chatId,
        `‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${timeLeft} –º–∏–Ω—É—Ç.`
      ).catch(err => logError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
    } else {
      bot.sendMessage(
        chatId,
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${MAX_ATTEMPTS - attemptData.attempts}`
      ).catch(err => logError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
    }
    
    authAttempts.set(chatId, attemptData);
  }
});

// ==============================================
// –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ó–ê–ö–ê–ó–ê–•
// ==============================================

async function sendOrderNotification(orderData) {
  if (!bot || !bot.isPolling()) {
    logError('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    return false;
  }

  if (!orderData || !orderData.orderId) {
    logError('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    return false;
  }

  if (activeAdmins.size === 0) {
    logAction('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    return false;
  }

  try {
    const orderId = orderData.orderId;
    const orderDate = new Date().toLocaleString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    let message = `üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderId}</b> [${orderDate}]\n`;
    message += '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n';
    message += `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.firstName} ${orderData.lastName || ''}\n`;
    message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${formatPhoneNumber(orderData.phone)}</code>\n`;
    message += `üè† <b>–ê–¥—Ä–µ—Å:</b> ${orderData.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
    message += 'üì¶ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n';
    
    orderData.basket.forEach((item, index) => {
      message += `${index + 1}. ${item.title}\n`;
      message += `   ${item.quantity} √ó ${item.price}‚ÇΩ = <b>${item.quantity * item.price}‚ÇΩ</b>\n`;
    });
    
    message += `\nüí∞ <b>–ò–¢–û–ì–û: ${orderData.totalAmount}‚ÇΩ</b>`;
    message += `\n\n‚è≥ <i>–°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ</i>`;

    // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å tel: –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–∏—Ç—å"
    const options = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: `complete:${orderId}` }]
        ]
      }
    };

    const sendPromises = [];
    activeAdmins.forEach(chatId => {
      sendPromises.push(
        bot.sendMessage(chatId, message, options)
          .then(() => {
            logAction(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${chatId}`);
            return true;
          })
          .catch(err => {
            logError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${chatId}:`, err);
            return false;
          })
      );
    });

    const results = await Promise.all(sendPromises);
    const successCount = results.filter(Boolean).length;
    
    logAction(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∏–∑ ${activeAdmins.size} –∞–¥–º–∏–Ω–∞–º`);
    
    return successCount > 0;
  } catch (error) {
    logError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    return false;
  }
}

function formatPhoneNumber(phone) {
  if (!phone) return '–ù–µ —É–∫–∞–∑–∞–Ω';
  const cleaned = phone.replace(/\D/g, '');
  if (cleaned.length === 11) {
    return `+${cleaned[0]} (${cleaned.substring(1, 4)}) ${cleaned.substring(4, 7)}-${cleaned.substring(7, 9)}-${cleaned.substring(9)}`;
  }
  return cleaned;
}


// ==============================================
// –ó–ê–ü–£–°–ö –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú
// ==============================================

let isPolling = false;

function startBot() {
  if (isPolling) {
    logAction('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
    return;
  }

  try {
    bot.startPolling();
    isPolling = true;
    setupBotMenu();
    logAction(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: ${activeAdmins.size}`);
    
    if (activeAdmins.size === 0) {
      logAction('‚ö†Ô∏è –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!');
    }
  } catch (err) {
    logError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
    process.exit(1);
  }
}

function stopBot() {
  if (isPolling) {
    bot.stopPolling();
    isPolling = false;
    logAction('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è
startBot();

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
process.on('SIGINT', () => {
  logAction('–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...');
  stopBot();
  process.exit();
});

module.exports = {
  bot,
  sendOrderNotification,
  startBot,
  stopBot,
  activeAdmins
};