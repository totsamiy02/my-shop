const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// ==============================================
// –ù–ê–°–¢–†–û–ô–ö–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ==============================================

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_BOT_TOKEN –≤ .env');
}

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  polling: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-–ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  filepath: false
});
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123';
const ADMINS_FILE = path.join(__dirname, 'admins.json');
const LOGS_FILE = path.join(__dirname, 'bot.log');

// ==============================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê–ú–ò
// ==============================================

let activeAdmins = loadAdmins();

function loadAdmins() {
  try {
    if (fs.existsSync(ADMINS_FILE)) {
      const data = fs.readFileSync(ADMINS_FILE, 'utf8');
      const admins = JSON.parse(data);
      if (Array.isArray(admins)) {
        return new Set(admins);
      }
    }
  } catch (err) {
    logError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ admins.json:', err);
  }
  return new Set();
}

function saveAdmins() {
  try {
    fs.writeFileSync(ADMINS_FILE, JSON.stringify([...activeAdmins], null, 2));
    logAction(`–ê–¥–º–∏–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${activeAdmins.size})`);
  } catch (err) {
    logError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è admins.json:', err);
  }
}

// ==============================================
// –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï
// ==============================================

function logAction(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ACTION: ${message}\n`;
  fs.appendFileSync(LOGS_FILE, logMessage);
  console.log(logMessage.trim());
}

function logError(message, error) {
  const timestamp = new Date().toISOString();
  const errorMessage = error ? `${message} ${error.stack || error}` : message;
  const logMessage = `[${timestamp}] ERROR: ${errorMessage}\n`;
  fs.appendFileSync(LOGS_FILE, logMessage);
  console.error(logMessage.trim());
}

// ==============================================
// –ò–ù–¢–ï–†–§–ï–ô–° –ë–û–¢–ê
// ==============================================

function setupBotMenu() {
  try {
    bot.setMyCommands([
      { command: '/start', description: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' },
      { command: '/admins', description: '–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤' },
      { command: '/stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞' },
      { command: '/logout', description: '–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏' }
    ]);

    bot.setChatMenuButton({
      menu_button: {
        type: 'commands'
      }
    });
  } catch (err) {
    logError('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é:', err);
  }
}

// ==============================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
// ==============================================

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  if (activeAdmins.has(chatId)) {
    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: 'üë• –ê–¥–º–∏–Ω—ã' }],
          [{ text: 'üö™ –í—ã–π—Ç–∏' }]
        ],
        resize_keyboard: true
      }
    };
    
    return bot.sendMessage(
      chatId,
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.`,
      keyboard
    );
  }
  
  bot.sendMessage(
    chatId, 
    'üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:',
    { reply_markup: { remove_keyboard: true }}
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
const authAttempts = new Map();
const MAX_ATTEMPTS = 5;
const BLOCK_TIME = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

bot.on('message', (msg) => {
  if (msg.text?.startsWith('/')) return;
  
  const chatId = msg.chat.id;
  const now = Date.now();
  
  if (authAttempts.has(chatId)) {
    const { attempts, lastAttempt, blockedUntil } = authAttempts.get(chatId);
    
    if (blockedUntil && now < blockedUntil) {
      const timeLeft = Math.ceil((blockedUntil - now) / 1000 / 60);
      return bot.sendMessage(
        chatId,
        `‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${timeLeft} –º–∏–Ω—É—Ç.`
      );
    }
  }

  if (msg.text === ADMIN_PASSWORD) {
    activeAdmins.add(chatId);
    saveAdmins();
    authAttempts.delete(chatId);
    
    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: 'üë• –ê–¥–º–∏–Ω—ã' }],
          [{ text: 'üö™ –í—ã–π—Ç–∏' }]
        ],
        resize_keyboard: true
      }
    };
    
    bot.sendMessage(
      chatId,
      '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n' +
      '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.',
      keyboard
    );
    logAction(`–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${chatId}`);
  } else if (!activeAdmins.has(chatId)) {
    const attemptData = authAttempts.get(chatId) || { attempts: 0 };
    attemptData.attempts++;
    attemptData.lastAttempt = now;
    
    if (attemptData.attempts >= MAX_ATTEMPTS) {
      attemptData.blockedUntil = now + BLOCK_TIME;
      const timeLeft = Math.ceil(BLOCK_TIME / 1000 / 60);
      bot.sendMessage(
        chatId,
        `‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${timeLeft} –º–∏–Ω—É—Ç.`
      );
    } else {
      bot.sendMessage(
        chatId,
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${MAX_ATTEMPTS - attemptData.attempts}`
      );
    }
    
    authAttempts.set(chatId, attemptData);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
bot.onText(/\/admins|üë• –ê–¥–º–∏–Ω—ã/, (msg) => {
  const chatId = msg.chat.id;
  
  if (!activeAdmins.has(chatId)) {
    return bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!');
  }
  
  if (activeAdmins.size === 0) {
    return bot.sendMessage(chatId, '‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  }
  
  let message = `üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (${activeAdmins.size}):\n\n`;
  activeAdmins.forEach(adminId => {
    message += `‚Äî ID: <code>${adminId}</code>\n`;
  });
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.onText(/\/stats|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/, (msg) => {
  const chatId = msg.chat.id;
  
  if (!activeAdmins.has(chatId)) {
    return bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!');
  }
  
  const stats = {
    activeAdmins: activeAdmins.size,
    memoryUsage: `${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB`,
    uptime: formatUptime(process.uptime())
  };
  
  let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n`;
  message += `üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.activeAdmins}\n`;
  message += `üß† –ü–∞–º—è—Ç—å: ${stats.memoryUsage}\n`;
  message += `‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${stats.uptime}`;
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

function formatUptime(seconds) {
  const days = Math.floor(seconds / (24 * 60 * 60));
  seconds %= 24 * 60 * 60;
  const hours = Math.floor(seconds / (60 * 60));
  seconds %= 60 * 60;
  const minutes = Math.floor(seconds / 60);
  seconds = Math.floor(seconds % 60);
  
  return `${days}d ${hours}h ${minutes}m ${seconds}s`;
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
bot.onText(/\/logout|üö™ –í—ã–π—Ç–∏/, (msg) => {
  const chatId = msg.chat.id;
  
  if (!activeAdmins.has(chatId)) {
    return bot.sendMessage(chatId, '‚ÑπÔ∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
  }
  
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úÖ –î–∞', callback_data: 'logout_confirm' }],
        [{ text: '‚ùå –ù–µ—Ç', callback_data: 'logout_cancel' }]
      ]
    }
  };
  
  bot.sendMessage(
    chatId, 
    '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?',
    keyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  try {
    if (data.startsWith('complete:')) {
      const orderId = data.split(':')[1];
      await bot.editMessageText(
        `‚úÖ –í–´–ü–û–õ–ù–ï–ù–û #${orderId}\n${callbackQuery.message.text}`,
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          parse_mode: 'Markdown'
        }
      );
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
    } 
    else if (data === 'logout_confirm') {
      activeAdmins.delete(chatId);
      saveAdmins();
      await bot.editMessageReplyMarkup(
        { inline_keyboard: [] },
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id
        }
      );
      bot.sendMessage(
        chatId, 
        'üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        { reply_markup: { remove_keyboard: true }}
      );
      logAction(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã—à–µ–ª: ${chatId}`);
    }
    else if (data === 'logout_cancel') {
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      bot.sendMessage(
        chatId,
        '–í—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω',
        {
          reply_markup: {
            keyboard: [
              [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: 'üë• –ê–¥–º–∏–Ω—ã' }],
              [{ text: 'üö™ –í—ã–π—Ç–∏' }]
            ],
            resize_keyboard: true
          }
        }
      );
    }
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
  }
});

// ==============================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–õ–ò–ù–ì–û–ú –ò –≠–ö–°–ü–û–†–¢
// ==============================================

let isPolling = false;

function startBot() {
  if (isPolling) {
    logAction('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
    return;
  }

  try {
    bot.startPolling();
    isPolling = true;
    setupBotMenu();
    logAction(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: ${activeAdmins.size}`);
    if (activeAdmins.size === 0) {
      logAction('‚ö†Ô∏è –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!');
    }
  } catch (err) {
    logError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
    process.exit(1);
  }
}

function stopBot() {
  if (isPolling) {
    bot.stopPolling();
    isPolling = false;
    logAction('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö
async function sendOrderNotification(orderData) {
  if (!isPolling) {
    logError('–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    return false;
  }

  if (activeAdmins.size === 0) {
    logAction('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤');
    return false;
  }

  try {
    const orderId = orderData.orderId || `ORD-${Date.now().toString().slice(-6)}`;
    const orderDate = new Date().toLocaleString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    let message = `üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderId}</b> [${orderDate}]\n`;
    message += '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n';
    message += `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.firstName} ${orderData.lastName}\n`;
    message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${orderData.phone}</code>\n`;
    message += `üè† <b>–ê–¥—Ä–µ—Å:</b> ${orderData.address}\n\n`;
    message += 'üì¶ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n';
    
    orderData.basket.forEach((item, index) => {
      message += `${index + 1}. ${item.title}\n`;
      message += `   ${item.quantity} √ó ${item.price}‚ÇΩ = <b>${item.quantity * item.price}‚ÇΩ</b>\n`;
    });
    
    message += `\nüí∞ <b>–ò–¢–û–ì–û: ${orderData.totalAmount}‚ÇΩ</b>`;
    message += `\n\n‚è≥ <i>–°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ</i>`;

    const options = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: `complete:${orderId}` },
            { text: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', url: `tel:${orderData.phone}` }
          ]
        ]
      }
    };

    const results = await Promise.allSettled(
      Array.from(activeAdmins).map(chatId => 
        bot.sendMessage(chatId, message, options)
    ));

    const successCount = results.filter(r => r.status === 'fulfilled').length;
    logAction(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∞–¥–º–∏–Ω–∞–º`);
    
    return successCount > 0;
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    return false;
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è
startBot();

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
process.on('SIGINT', () => {
  logAction('–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...');
  stopBot();
  process.exit();
});

module.exports = {
  bot,
  sendOrderNotification,
  startBot,
  stopBot,
  activeAdmins
};